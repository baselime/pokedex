service: baselime-pokedex

custom:
  region: eu-west-1

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 128
  stage: ${opt:stage}
  timeout: 30
  region: "${self:custom.region}"
  tracing: 
    lambda: true
  logRetentionInDays: 1
  versionFunctions: false
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
          - 'dynamodb:putItem'
          - 'dynamodb:scan'
          - 'dynamodb:query'
          Resource: 
           - !GetAtt Table.Arn
           - !Sub '${Table.Arn}/*'
        - Effect: Allow
          Action: 
          - 's3:getObject'
          - 's3:putObject'
          Resource: 
           - !Sub '${Bucket.Arn}/pokedex.json'
        - Effect: Allow
          Action: 
          - 'SNS:Publish'
          Resource: 
           - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dispatch'
  logs:
    restApi:
      accessLogging: true
      format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent","principalId":"$context.authorizer.principalId"}'
      executionLogging: false # Turn off execution logs b/c they're too noisy.

functions:
  pokedex-get:
    handler: get.handler
    description: ${opt:stage} - gets a pokemon from the pokedex
    events:
      - http: 
          path: pokemons/{name}
          method: get 
          cors: true
          request: 
            parameters: 
              paths: 
                name: true
  seed:
    timeout: 900
    handler: seed.handler
    description: seeds the db
  pokedex-list:
    handler: list.handler
    description: ${opt:stage} - lists pokemons from the pokedex
    events:
      - http: 
          path: pokemons
          method: get 
          cors: true
  pokedex-search:
    handler: search.handler
    description: ${opt:stage} - search the pokemon db
    events:
      - http: 
          path: search
          method: get 
          cors: true
  ping:
    timeout: 90
    handler: ping.ping
    events:
      - schedule: rate(1 minute)
    environment:
      TOPIC_ARN: !Ref SNSTopicDispatch
  echo-to-nothing:
    handler: src/echo-to-nothing.handler
    events:
      - sns: dispatch

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage}
        AttributeDefinitions:
          - AttributeName: game
            AttributeType: S
          - AttributeName: id
            AttributeType: N
          - AttributeName: en
            AttributeType: S
          - AttributeName: jp
            AttributeType: S
          - AttributeName: ch
            AttributeType: S
          - AttributeName: fr
            AttributeType: S
         
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: game
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: en-name-index
            KeySchema:
              - AttributeName: game
                KeyType: HASH
              - AttributeName: en
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: jp-name-index
            KeySchema:
              - AttributeName: game
                KeyType: HASH
              - AttributeName: jp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ch-name-index
            KeySchema:
              - AttributeName: game
                KeyType: HASH
              - AttributeName: ch
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: fr-name-index
            KeySchema:
              - AttributeName: game
                KeyType: HASH
              - AttributeName: fr
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: poke-search-bucket-${opt:stage}

          
